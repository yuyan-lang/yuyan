观「藏书阁」之「标准库」之书。
观「组合子数据结构」之书。
观「藏书阁」之「标准库」之「数据结构」之「字符流术」之书。


「成功解析器」乃承元类型者甲而化甲而解析器于甲也。
成功解析器者会结果而
    构造解析器于（会输入而
        成功解析于结果于输入
    ）也。

「：Monadic Binder：」
「继续解析」乃承元类型者甲而承元类型者乙而化解析器于甲而化（化甲而解析器于乙）而
        解析器于乙也。
继续解析者会器甲而会器乙生而
    构造解析器于（会串而
        鉴（运行解析器于器甲于串）而有
            成功解析于「结果甲」于「剩余甲」则（
                运行解析器于（器乙生于结果甲）于剩余甲
            ）
            或有失败解析于「原因」于「剩余」则（
                失败解析于原因于剩余 
            ）
    ）也。

「顺序组合」乃承元类型者甲而承元类型者乙而承元类型者丙而化解析器于甲而化解析器于乙而化（化甲而化乙而丙）而
        解析器于丙也。
顺序组合者会器甲而会器乙而会丙生而
    继续解析于器甲于（会结果甲而
        继续解析于器乙于（会结果乙而
            成功解析器于（丙生于结果甲于结果乙）
        ）
    ）也。

「顺序组合取前」乃承元类型者甲而承元类型者乙而化解析器于甲而化解析器于乙而
        解析器于甲也。
顺序组合取前者会器甲而会器乙而
    「顺序组合」于器甲于器乙于（会甲而会乙而甲）也。

「顺序组合取后」乃承元类型者甲而承元类型者乙而化解析器于甲而化解析器于乙而
        解析器于乙也。
顺序组合取后者会器甲而会器乙而
    「顺序组合」于器甲于器乙于（会甲而会乙而乙）也。

「顺序包裹」乃承元类型者甲而承元类型者乙而承元类型者丙而化解析器于甲而化解析器于乙而化解析器于丙而解析器于乙也。
顺序包裹者会器甲而会器乙而会器丙而
    「顺序组合取前」于（「顺序组合取后」于器甲于器乙）于器丙也。


「结果变换」乃承元类型者甲而承元类型者乙而化解析器于甲而化（化甲而乙）而解析器于乙也。
结果变换者会器而会变换而
    构造解析器于（会输入而
        鉴（运行解析器于器于输入）而有
            成功解析于结果于剩余则（
                成功解析于（变换于结果）于剩余
            ）
            或有失败解析于「原因」于「剩余」则（
                失败解析于原因于剩余 
            ）
    ）也。

「失败解析器」乃承元类型者甲而化字符串而解析器于甲也。
失败解析器者会错误信息而
    构造解析器于（会输入而
        失败解析于错误信息于输入
    ）也。

「选择解析」乃承元类型者甲而化（解析器于甲）列而解析器于甲也。
选择解析者会器们而
    鉴器们而
 或有【】则发生事故于『空的选择解析』
        或有「唯一器」衔【】则唯一器
        或有「第一」衔「余下」则
            （
                构造解析器于（会输入而
                    鉴（运行解析器于第一于输入）而有
                        成功解析于「结果甲」于「剩余甲」则（
                            成功解析于结果甲于剩余甲
                        ）
                        或有失败解析于「原因」于「剩余」则（
                            「：使用与Haskell一样的语义：」
                            若（「字符流位置相等」于剩余于输入）则
                                运行解析器于（选择解析于余下）于输入
                            否则（失败解析于原因于剩余）
                        ）
                ）
            ）也。

「：在失败时回溯输入：」
「尝试解析」乃承元类型者甲而化解析器于甲而解析器于甲也。
尝试解析者会器而
    构造解析器于（会输入而
        鉴（运行解析器于器于输入）而有
            成功解析于「结果」于「剩余」则（
                成功解析于结果于剩余
            ）
            或有失败解析于「原因」于「剩余」则（
                失败解析于原因于输入
            ）
    ）也。


「零或多个」乃承元类型者甲而化解析器于甲而解析器于甲列也。
零或多个者会器而
    构造解析器于（会输入而
        鉴（运行解析器于器于输入）而有
            （成功解析于「第一个结果」于「剩余」）则（
                （运行解析器于（结果变换于（「零或多个」于器）于（会尾而第一个结果衔尾））于剩余）
            ）
            或有（失败解析于「错误信息」于「剩余」）则（成功解析于【】于输入「：在失败解析时 回溯输入进度：」）
    ）也。

「一或多个」乃承元类型者甲而化解析器于甲而解析器于甲列也。
一或多个者会器而
    「： 虑无者打印行于『调用了一或多个』而 ：」
    构造解析器于（会输入而
        鉴（运行解析器于器于输入）而有
            （成功解析于「第一个结果」于「剩余」）则（
                「： 打印行于『有第一个结果，剩余』附（「串组合并」于剩余）； ：」
                运行解析器于（结果变换于（「零或多个」于器）于（会尾而第一个结果衔尾））于剩余
            ）
            或有（失败解析于「错误信息」于「剩余」）则（
                「： 打印行于『没有第一个结果』； ：」
                失败解析于错误信息于剩余）
    ）也。


「以分割至少一个」乃承元类型者甲而承元类型者乙而化解析器于甲而化解析器于乙而解析器于乙列也。
以分割至少一个者会分割符而会本体而
    继续解析于本体于（会后本体而
        构造解析器于（会可能分割输入而
            鉴（运行解析器于分割符于可能分割输入）而
 或有（成功解析于「分隔符结果」于「剩余」）则（
                    运行解析器于（继续解析于（「以分割至少一个」于「分割符」于「本体」）于（会「后列」而成功解析器于（后本体衔「后列」）））于剩余
                ）
                或有（失败解析于「错误信息」于「剩余」）则（
                    成功解析于（【后本体】）于「可能分割输入」
                ）
            
        ）
    ）
    也。

「：以下两个函数参考了Haskell的Parsec实现，我们也可以自己实现：」
「以分割」乃承元类型者甲而承元类型者乙而化解析器于甲而化解析器于乙而解析器于乙列也。
以分割者会分割符而会本体而
    选择解析于【「以分割至少一个」于「分割符」于本体，（成功解析器于【】）】也。
