

观「爻术」之书。

观「藏书阁」之「标准库」之「语言核心」之「内建类型」之书。

观「整数操作」之书。
「： 寻标准库之语言核心之错误之书。 ：」
观「藏书阁」之「标准库」之「语言核心」之「异常」之书。
「： 寻随机之书。 ：」
观「藏书阁」之「标准库」之「输入输出」之「笔」之书。
观「可选值」之书。
观「藏书阁」之「标准库」之「语言核心」之「续延」之书。

「： 「索引异常」者异常之新建异常于有于『索引异常』也。 ：」

「列」作化元类型而元类型也。
「列」者《《外部调用『list』》》也。
「空」立（承「甲」而「列」于「甲」）也。
「空」者《《外部调用『[]』》》也。
「多」立（承「甲」而化「甲」，「列」于「甲」而「列」于「甲」）也。
「多」者《《外部调用『(::)』》》也。
术「90」「类」列盖谓「列」于「类」也。
术【「内容」】盖谓「《《组件右折叠》》」于（「多」、「内容」、「空」）也。

术【】盖谓「空」也。
术「180」「左」衔「右」「179」盖谓「多」于（「左」、「右」）也。





「： 注 list map。 ：」
「态射」乃（承「甲」而承「乙」而化（化「甲」而「乙」）而化「甲」列而「列」于「乙」）也。
「态射」者
    会「射」而（会「列」而（鉴「列」而
 或有「空」则「空」
        或有「头」衔「尾」则
            （（「射」于（「头」））衔（「态射」于「射」于（「尾」）））
    ））也。

「：打表态射，、态射类似，不过列表在第一个参数：」
「打表态射」乃（承「甲」而承「乙」而化「甲」列而化（化「甲」而「乙」）而「列」于「乙」）也。
「打表态射」者会「列」而会「射」而「态射」于「射」于「列」也。



「： 注 list foldr。 ：」
「从右折叠」乃承「甲」而承「乙」而化（化「甲」而化「乙」而「乙」）而化「乙」而化「甲」列而「乙」也。
「从右折叠」者会「组合」而会「缺省」而（会「甲」而鉴「甲」而
 或有「空」则「缺省」
        或有「头」衔「尾」则
            （
                「组合」于「头」于（「从右折叠」于「组合」于「缺省」于（「尾」））
            ））也。

「： 注 list foldl。 ：」
「从左折叠」乃承「甲」而承「乙」而化（化「甲」而化「乙」而「乙」）而化「乙」而化「甲」列而「乙」也。
「从左折叠」者会「组合」而会「缺省」而会「甲」而鉴「甲」而
        或有「空」则「缺省」
        或有「头」衔「尾」则
                「从左折叠」于「组合」于（「组合」于「头」于「缺省」）于「尾」

            也。

「： 注：list filter。 ：」
「滤」乃承「乙」而化（化「乙」而「爻」）而化「乙」列而「乙」列也。
「滤」者会「过滤函数」而（
        会「甲」而鉴「甲」而
 或有「空」则「甲」
        或有「头」衔「尾」则
                若（「过滤函数」于（「头」））
                则「头」衔（「滤」于「过滤函数」于（「尾」））
                否则（「滤」于「过滤函数」于（「尾」））
            ）也。


「： 注append。 ：」
「附加」乃承「乙」而化「乙」列而化「乙」列而「乙」列也。
「附加」者会「列一」而会「列二」而鉴「列一」而
 或有「空」则「列二」
        或有「头」衔「尾」则
            
                「头」衔（「附加」于「尾」于「列二」）
            也。
「〇接〇」乃承「乙」而化「乙」列而化「乙」列而「乙」列也。
「〇接〇」者「附加」也。
术「77」「左」接「右」「78」盖谓「附加」于「左」于「右」也。

「： 注 list foldmap。 ：」
「从左态射折叠」乃承「甲」而承「乙」而承「丙」而化（化「甲」而化「乙」而「丙」，「乙」）而化「乙」而化「甲」列而「丙」列，「乙」也。
「从左态射折叠」者受「甲」而受「乙」而受「丙」而（会「组合」而会「缺省」而会「甲列」而
    「从左折叠」授以「甲」授以（「丙」列，「乙」）于（会「当前元素」而会「列及累加」而
        鉴「列及累加」而
 或有（「丙列」、「累加」）则（
            鉴（「组合」于「当前元素」于（「列及累加」之「一」））而
 或有（「新素」、「新累加」）则（（（「列及累加」之「零」）接【「新素」】）、「新累加」）
        ）
    ）于（【】、「缺省」）于「甲列」）也。

「： 注append。 ：」
「结尾多」乃承「乙」而化「乙」列而化「乙」而「乙」列也。
「结尾多」者会「列一」而会「元素」而
        「列一」接（（「元素」）衔【】）也。


「： 注reverse。 ：」
「反转」乃承「乙」而化「乙」列而「乙」列也。
「反转」者会「列」而（鉴「列」而
 或有「空」则（「列」）
        或有「头」衔「尾」则
                （「反转」于（「尾」））接（（「头」）衔【】）
）也。
「： 注concat。建议改名：列联 ：」
「串联」乃承「乙」而化「乙」列列而「乙」列也。
「串联」者会「甲」而鉴「甲」而
 或有「空」则「空」
        或有「头」衔「尾」则「头」接（「串联」于（「尾」））
            也。

「： 注length。 ：」
「长度」乃承「乙」而化「乙」列而「整数」也。
「长度」者
        会「甲」而鉴「甲」而
        或有「空」则「零」
        或有「头」衔「尾」则
                （「一」加（「长度」于（「尾」）））
        也。

「： 注takeN。 ：」
「取」乃承「乙」而化「整数」而化「乙」列而「乙」列也。
「取」者会「数」而会「甲」而
            鉴「甲」而
 或有「空」则「空」
            或有「头」衔「尾」则
                若 「数」 等于 「零」
                    则「空」
                    否则
                            「头」衔
                            （「取」于（「数」 减去 （「一」））于（「尾」））
                也。

「： 注dropN。 ：」
「放」乃承「乙」而化「整数」而化「乙」列而「乙」列也。
「放」者
        会「数」而会「甲」而
            鉴「甲」而
 或有「空」则（
                若 「数」 等于 「零」
                则 （【】）
                「： 否则 索引异常之抛出于元 ：」
                否则 「发生事故」于『索引异常』
            ）
            或有「头」衔「尾」则
                若「等零」于「数」则「甲」
                    否则
                            
                            （「放」于（「数」减去「一」）于（「尾」））
                也。

「： 注dropN at the end。 ：」
「结尾放」乃承「乙」而化「整数」而化「乙」列而「乙」列也。
「结尾放」者受「乙」而会「数」而会「列」而
        「反转」于（「放」于「数」于（（「反转」）于「列」））
        也。

「： 注beginswith。 ：」
「以起否」乃承「乙」而化（化「乙」而化「乙」而（「爻」））而化「乙」列而化「乙」列而「爻」也。
「以起否」者
        会「等于测试」而会「前缀」而会「测试列」而
             鉴「前缀」而
 或有「空」则「阳」
            或有「缀头」衔「缀尾」则
            （
                鉴「测试列」而
                或有「空」则「阴」
                或有「测头」衔「测尾」则
                        （（「等于测试」 于 （「缀头」） 于（「测头」））
                        且（「以起否」于「等于测试」 于 （「缀尾」） 于 （「测尾」）））
                ）
                也。
「： 注endswith。 ：」
「以终否」乃承「乙」而化（化「乙」而化「乙」而（「爻」））而化「乙」列而化「乙」列而「爻」也。
「以终否」者会「等于测试」而会「后缀」而会「测试列」而
            「以起否」于「等于测试」于（（「反转」）于「后缀」）于（「反转」于「测试列」）也。


「： 注exists。 ：」
「存在吗」乃承「乙」而化（化「乙」而（「爻」））而化「乙」列而「爻」也。
「存在吗」者会「函」而会「列」而「非」于（（「零」） 等于 （「长度」于（（「滤」于「函」于（「列」）））））也。    

「： 注all。 ：」
「全部符合」乃承「乙」而化（化「乙」而（「爻」））而化「乙」列而「爻」也。
「全部符合」者会「函」而会「列」而（（「长度」于「列」） 等于 （「长度」于（（「滤」于「函」于（「列」）））））也。    
        
「： 注tabulate。 ：」
「打表」乃承「乙」而化「整数」而化（化「整数」而（「乙」））而「乙」列也。
「打表」者受「乙」而会「数」而会「函」而
虑「原数」者「数」而
（
    递归虑「递归」其化「整数」而「乙」列者会「当前数」而
        （
            「： 打印行于串；
            打印行于『递归，原数：』；
            打印行于（整数表示于「原数」）；
            打印行于『当前数：』；
            打印行于（整数表示于「当前数」）； ：」
            若「当前数」 等于 「原数」则
                （
                    「： 打印行于『当前数等于原数』；  ：」
                    「空」）
                否则（（
                    「： 打印行于『调用函中』； ：」
                    （虑「返回」者「函」于（「当前数」）而（
                    「： 打印行于『函调用结束』； ：」
                    「返回」））））
                    衔（「递归」于（「当前数」 加 （「一」）））
        ）而
    「递归」于「零」
）也。

「： 调查（bs）：空的参数会错误地被合成

「打表」乃承「乙」而化「整数」而化（化「整数」而（「乙」））而「乙」列也。
「打表」者受「乙」而会「数」而会「函」而
虑（
    「原数」者「数」也。
    「递归」乃承「乙」而化「整数」而「乙」列也。
    「递归」者会「当前数」而
        若「当前数」 等于 「原数」则
            「空」
            否则（「函」于（「当前数」））衔（「递归」于（「当前数」 加 （「一」）））也。
    「递归」授以「乙」于「零」
）也。 ：」


「第N个」乃承「乙」而化「整数」而化「乙」列而「乙」也。
「第N个」者会「数」而会「列」而
    「： 若「小于」于「数」于「零」则
        「发生事故」于『索引异常：负数索引』
    否则
        递归虑「第N个辅助」其（承「乙」而化「乙」列，「整数」而「乙」）者（会「当前列及当前数」而
            鉴「当前列及当前数」之零而
                或有「空」则「发生事故」于『索引异常』
                或有「头」衔「尾」则
                    若「当前列及当前数」之一等于「零」则
                        「头」
                    否则
                        「第N个辅助」于（「尾」、（「当前列及当前数」之「一」减「一」））
        ）
        而「第N个辅助」于（「列」、「数」）也。 ：」




    若「零」 等于 「数」则（
        鉴「列」而
 或有「头」衔「尾」则（「头」）
            或有「空」则
            （「发生事故」于『索引异常』）
    ）否则（
        鉴「列」而
            或有「头」衔「尾」则（「第N个」于（「数」 减去 「一」）于「尾」）
            或有「空」则
            （「发生事故」于『索引异常』）
    ） 
   也。

