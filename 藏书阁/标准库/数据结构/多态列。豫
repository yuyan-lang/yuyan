

观「爻术」之书。

观「藏书阁」之「标准库」之「语言核心」之「内建类型」之书。

观「整数操作」之书。
「： 寻标准库之语言核心之错误之书。 ：」
观「藏书阁」之「标准库」之「语言核心」之「异常」之书。
「： 寻随机之书。 ：」
观「藏书阁」之「标准库」之「输入输出」之「笔」之书。
观「可选值」之书。
观「藏书阁」之「标准库」之「语言核心」之「续延」之书。

「： 「索引异常」者异常之新建异常于有于『索引异常』也。 ：」

「： 「〇列」号化元类型而元类型也。 ：」
「列」立化元类型而元类型也。
「〇列」即列也。
术〇列交左序七零零也。
术列交无序七零零也。
「空」立（承元类型者「甲」而甲列）也。
「多」立（承元类型者「甲」而化甲而化甲列而甲列）也。

【】即空也。
术【】交无序七一零也。
「〇衔〇」即多也。
术〇衔〇交右序七零零也。
「【〇】」乃（承元类型者「甲」而化甲而甲列）也。
「【〇】」者会甲而甲衔空也。
术【〇】交无序七零零也。
「【〇，〇】」乃（承元类型者「甲」而化甲而化甲而甲列）也。
「【〇，〇】」者会甲而会乙而甲衔乙衔空也。
术【〇，〇】交无序七零零也。
「【〇，〇，〇】」乃（承元类型者「甲」而化甲而化甲而化甲而甲列）也。
「【〇，〇，〇】」者会甲而会乙而会丙而甲衔乙衔丙衔空也。
术【〇，〇，〇】交无序七零零也。
「【〇，〇，〇，〇】」乃（承元类型者「甲」而化甲而化甲而化甲而化甲而甲列）也。
「【〇，〇，〇，〇】」者会甲而会乙而会丙而会丁而甲衔乙衔丙衔丁衔空也。
术【〇，〇，〇，〇】交无序七零零也。
「【〇，〇，〇，〇，〇】」乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而甲列）也。
「【〇，〇，〇，〇，〇】」者会甲而会乙而会丙而会丁而会戊而甲衔乙衔丙衔丁衔戊衔空也。
术【〇，〇，〇，〇，〇】交无序七零零也。
「：
「【〇，〇，〇，〇，〇，〇】」乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而甲衔乙衔丙衔丁衔戊衔己衔空也。
术【〇，〇，〇，〇，〇，〇】交无序七零零也。
「【〇，〇，〇，〇，〇，〇，〇】」乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而甲衔乙衔丙衔丁衔戊衔己衔庚衔空也。
术【〇，〇，〇，〇，〇，〇，〇】交无序七零零也。
「【〇，〇，〇，〇，〇，〇，〇，〇】」乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而会辛而甲衔乙衔丙衔丁衔戊衔己衔庚衔辛衔空也。
术【〇，〇，〇，〇，〇，〇，〇，〇】交无序七零零也。
「【〇，〇，〇，〇，〇，〇，〇，〇，〇】」乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而会辛而会壬而甲衔乙衔丙衔丁衔戊衔己衔庚衔辛衔壬衔空也。
术【〇，〇，〇，〇，〇，〇，〇，〇，〇】交无序七零零也。
「【〇，〇，〇，〇，〇，〇，〇，〇，〇，〇】」乃（承元类型者「甲」而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而化甲而甲列）也。
【〇，〇，〇，〇，〇，〇，〇，〇，〇，〇】者会甲而会乙而会丙而会丁而会戊而会己而会庚而会辛而会壬而会癸而甲衔乙衔丙衔丁衔戊衔己衔庚衔辛衔壬衔癸衔空也。
术【〇，〇，〇，〇，〇，〇，〇，〇，〇，〇】交无序七零零也。 ：」





「： 乘乃化整数而化整数而整数也。
乘者会甲而会乙而《《外部调用》》『yyIntMult』于甲于乙也。 ：」

「： 注 list map。 ：」
「态射」乃（承元类型者「甲」而承元类型者「乙」而化「化甲而「乙」」而化甲列而列于乙）也。
态射者循态射以
    会射而（会列而「鉴列而
        有空则空
        或有头衔尾则
            （（射于（头））衔「态射于射于（尾）」 ）
            」）也。

「：打表态射，与态射类似，不过列表在第一个参数：」
「打表态射」乃（承元类型者「甲」而承元类型者「乙」而化甲列而化「化甲而「乙」」而列于乙）也。
打表态射者会列而会射而态射于射于列也。



「： 注 list foldr。 ：」
「从右折叠」乃承元类型者「甲」而承元类型者「乙」而化「化甲而化乙而「乙」」而化乙而化甲列而乙也。
从右折叠者循从右折叠以会
    组合而会缺省而（会甲而「鉴甲而
        有空则缺省
        或有头衔尾则
            「
                「组合」于头于「从右折叠于「组合」于缺省于（尾）」 
            」」）也。

「： 注 list foldl。 ：」
「从左折叠」乃承元类型者「甲」而承元类型者「乙」而化「化甲而化乙而「乙」」而化乙而化甲列而乙也。
从左折叠者循从左折叠以会
    组合而会缺省而会甲而「鉴甲而
        有空则缺省
        或有头衔尾则
            「
                「从左折叠于「组合」于（「组合」于头于缺省）于尾」 
            」」也。

「： 注：list filter。 ：」
「滤」乃承元类型者「乙」而化「化「乙」而爻」而化乙列而乙列也。
滤者循滤以会
    过滤函数而（
        会甲而鉴甲而
        有空则甲
        或有头衔尾则
            「
                若「过滤函数于（头）」
                则「头衔「滤于过滤函数于（尾）」」
                否则「滤于过滤函数于（尾）」
            」）也。

「滤debug」乃承元类型者「乙」而化「化「乙」而爻」而化乙列而乙列也。
滤debug者受乙而会
    过滤函数而会甲而虑（
        结果者滤授以乙于过滤函数于甲也。
        笔之打印行于『过滤完成，结果是』；
         「： 笔之调试打印于（（乙）列）于甲。 ：」
        结果
    ）也。

「： 注append。 ：」
「附加」乃承元类型者「乙」而化乙列而化乙列而乙列也。
附加者循附加以会
    列一而会列二而「鉴「列一」而
        有空则「列二」
        或有头衔尾则
            「
                头衔（「附加」于尾于「列二」）
            」」也。
「〇@〇」者「附加」也。
术〇@〇交右序六八九也。
「〇接〇」者「附加」也。
术〇接〇交右序六八九也。

「： 注 list foldmap。 ：」
「从左态射折叠」乃承元类型者「甲」而承元类型者「乙」而承元类型者「丙」而化「化甲而化乙而丙合「乙」」而化乙而化甲列而丙列合乙也。
从左态射折叠者受甲而受乙而受丙而（会
    组合而会缺省而会甲列而
    从左折叠授以甲授以（丙列合乙）于（会当前元素而会列及累加而
        鉴「列及累加」而
        有（「丙列」与「累加」）则（
            鉴（「组合」于当前元素于（「列及累加」中一））而
                有（新素与「新累加」）则（（「列及累加」中零）接【新素】与「新累加」）
        ）
    ）于（【】与缺省）于「甲列」）也。

「： 注append。 ：」
「结尾多」乃承元类型者「乙」而化乙列而化乙而乙列也。
结尾多者会列一而会元素而
        「列一」@（（元素）衔【】）也。


「： 注reverse。 ：」
「反转」乃承元类型者「乙」而化乙列而乙列也。
反转者循反转以会列而（鉴列而
        有空则（列）
        或有头衔尾则
                （反转于（尾））接（（头）衔【】）
）也。
「： 注concat。建议改名：列联 ：」
「串联」乃承元类型者「乙」而化乙列列而乙列也。
串联者循串联以会甲而鉴甲而
        有空则空
        或有头衔尾则头接（串联于（尾））
            也。

「： 注length。 ：」
「长度」乃承元类型者「乙」而化乙列而整数也。
长度者循长度以
        会甲而「鉴甲而
        有空则零
        或有头衔尾则
                （一加（长度于（尾）））
        」也。

「： 注takeN。 ：」
「取」乃承元类型者「乙」而化整数而化乙列而乙列也。
取者循取以会数而会甲而
            鉴甲而
            有空则空
            或有头衔尾则
                「若 数 = 零
                    则空
                    否则
                        「
                            头衔
                            （取于（数 - （一））于（尾））
                」」也。

「： 注dropN。 ：」
「放」乃承元类型者「乙」而化整数而化乙列而乙列也。
放者循放以
        会数而会甲而
            鉴甲而
            有空则（
                若 数 = 零
                则 （【】）
                「： 否则 索引异常之抛出于元 ：」
                否则 发生事故于『索引异常』
            ）
            或有头衔尾则
                「若「整数操作」之「等零」于数则甲
                    否则
                        「
                            
                            （放于（数减（一））于（尾））
                」」也。

「： 注dropN at the end。 ：」
「结尾放」乃承元类型者「乙」而化整数而化乙列而乙列也。
结尾放者受乙而会数而会列而
        反转于（放于数于（（反转）于列））
        也。

「： 注beginswith。 ：」
「以起否」乃承元类型者「乙」而化（化乙而化乙而（爻））而化乙列而化乙列而爻也。
以起否者循「以起否」以
        会等于测试而会前缀而会测试列而
             鉴前缀而
            有空则阳
            或有「缀头」衔「缀尾」则
                「鉴「测试列」而
                    有空则阴
                    或有「测头」衔「测尾」则
                        （（「等于测试」 于 （缀头） 于（测头））
                        且（「以起否」于「等于测试」 于 （缀尾） 于 （测尾）））
                」也。
「： 注endswith。 ：」
「以终否」乃承元类型者「乙」而化（化乙而化乙而（爻））而化乙列而化乙列而爻也。
以终否者会等于测试而会后缀而会测试列而
            「以起否」于「等于测试」于（（反转）于后缀）于（反转于「测试列」）也。


「： 注exists。 ：」
「存在吗」乃承元类型者「乙」而化（化乙而（爻））而化乙列而爻也。
存在吗者会函而会列而非于（（零） = （长度于（（滤于函于（列）））））也。    

「： 注all。 ：」
「全部符合」乃承元类型者「乙」而化（化乙而（爻））而化乙列而爻也。
全部符合者会函而会列而（（长度于列） = （长度于（（滤于函于（列）））））也。    
        
「： 注tabulate。 ：」
「打表」乃承元类型者「乙」而化整数而化（化整数而（乙））而乙列也。
打表者受乙而会数而会函而
虑（
    「原数」者数也。
    「： 打印行于串。
    打印行于『打表，原数：』。
    打印行于（整数表示于「原数」）。 ：」
    递归乃化整数而乙列也。
    递归者循递归以会当前数而
        （
            「： 打印行于串；
            打印行于『递归，原数：』；
            打印行于（整数表示于「原数」）；
            打印行于『当前数：』；
            打印行于（整数表示于「当前数」）； ：」
            若当前数 = 原数则
                （
                    「： 打印行于『当前数等于原数』；  ：」
                    空）
                否则（（
                    「： 打印行于『调用函中』； ：」
                    （虑返回者函于（当前数）而（
                    「： 打印行于『函调用结束』； ：」
                    返回））））
                    衔（递归于（当前数 + （一）））
        ）也。
    递归于零
）也。

「： 调查（bs）：空的参数会错误地被合成

「打表」乃承元类型者「乙」而化整数而化（化整数而（乙））而乙列也。
打表者受乙而会数而会函而
虑（
    「原数」者数也。
    递归乃承元类型者「乙」而化整数而乙列也。
    递归者循递归以会当前数而
        若当前数 = 原数则
            空
            否则（函于（当前数））衔（递归于（当前数 + （一）））也。
    递归授以乙于零
）也。 ：」


「第N个」乃承元类型者「乙」而化整数而化乙列而乙也。
第N个者循第N个以会数而会列而
    若零 = 数则（
        鉴列而
            有头衔尾则（头）
            或有空则
            （发生事故于『索引异常』）
    ）否则（
        鉴列而
            有头衔尾则（第N个于（数 - （一））于尾）
            或有空则
            （发生事故于『索引异常』）
    ）
    也。
