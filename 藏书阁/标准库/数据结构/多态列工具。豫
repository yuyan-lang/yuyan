观「多态列」之书。
观「藏书阁」之「标准库」之「语言核心」之「内建类型」之书。
观「藏书阁」之「标准库」之「语言核心」之「引用」之书。

观「整数操作」之书。
观「爻术」之书。
观「藏书阁」之「标准库」之「语言核心」之「异常」之书。
观「可选值」之书。
观「藏书阁」之「标准库」之「语言核心」之「续延」之书。

「头一个」乃承元类型者乙而化乙列而乙也。
头一个者受乙而会列而
    鉴列而
 或有空则
        （发生事故于『索引异常』
            「： 索引异常之抛出授以乙于元 ：」
            「： 注（错误之错误 授以（乙））于『错误：第N个的N超出了范围』 ：」
            ）
        或有「头」衔「尾」则（
            头
        ）也。

「最后一个」乃承元类型者乙而化乙列而乙也。
最后一个者会列而
     头一个于（反转于「列」）也。

「更新第N个」乃承元类型者乙而化整数而化（化乙而乙）而化乙列而乙列也。
更新第N个者会序数而会射而会列而
    （取于序数于「列」）接（【射于（第N个于序数于「列」）】）接（放于（序数加一）于「列」）也。

「移除重复」乃承元类型者乙而化（化乙而化乙而爻）而化乙列而乙列也。
移除重复者会等而会入而
    鉴入而
 或有【】则【】
        或有「头」衔「尾」则头衔（移除重复于「等」于（滤于（会甲而非于（「等」于甲于头））于尾））也。

「找到重复」乃承元类型者乙而化（化乙而化乙而爻）而化乙列而乙列也。
找到重复者会等而会入而
    鉴入而
 或有【】则【】
        或有「头」衔「尾」则
        （若「存在吗」于（「等」于头）于尾
        则头衔（找到重复于「等」于（滤于（会甲而非于（「等」于甲于头））于尾））
        否则找到重复于「等」于尾）也。
        
「出现重复」乃承元类型者乙而化（化乙而化乙而爻）而化乙列而爻也。
出现重复者会等而会入而
    （长度于入）不等于（长度于（移除重复于「等」于入））也。

「：zip，长度必须一样：」
「拉链合并」乃承元类型者甲而承元类型者乙而化甲列而化乙列而（甲，乙）列也。
拉链合并者会甲列而会乙列而
    鉴「甲列」、「乙列」而
 或有【】、【】则【】
    或有（「甲首」衔「甲尾」）、（「乙首」衔「乙尾」）则（甲首、乙首）衔（「拉链合并」于甲尾于乙尾）
    或有「其他」则发生事故于『拉链合并于不同长度的两个列』也。
    

「态射二」乃（承元类型者甲而承元类型者乙而承元类型者丙而化（化甲而化丙而「乙」）而化甲列而化丙列而乙列）也。
态射二者受甲而受乙而（会射而（会列甲而会列丙而（鉴「列甲」、「列丙」而
 或有空、空则空
        或有「甲头」衔「甲尾」、「乙头」衔「乙尾」则
            （（射于「甲头」于「乙头」）衔（态射二于射于「甲尾」于「乙尾」） ）
        或有「其他」则发生事故于『态射二中的长度不一致！！』
）））也。

「： 注all。 ：」
「全部符合二」乃（承元类型者甲而承元类型者乙而化（化甲而化乙而「爻」）而化甲列而化乙列而爻）也。
全部符合二者会判断而会列甲而会列乙而
    鉴「列甲」、「列乙」而
 或有空、空则阳
        或有「甲头」衔「甲尾」、「乙头」衔「乙尾」则
            （若（判断于甲头于乙头）
            则（「全部符合二」于判断于甲尾于乙尾）
            否则阴 ）
        或有「其他」则发生事故于『态射二中的长度不一致！！』也。


「列相等」乃承元类型者甲而化（化甲而化甲而爻）而化甲列而化甲列而爻也。
列相等者会比较而会列甲而会列乙而
    若（（长度于「列甲」）不等于（长度于「列乙」））
    则（阴）
    否则（「全部符合二」于比较于「列甲」于「列乙」）也。



「整数范围」乃化整数而化整数而整数列也。
整数范围者会始而会止而
    若「或者」于（始大于止）于（始等于止）
    则【】
    否则始衔（整数范围于（始加一）于止）也。

「：list map_i：」
「态射序号」乃（承元类型者甲而承元类型者乙而化（化整数而化甲而「乙」）而化甲列而乙列）也。
「态射序号」者受甲而受乙而会射而会列而（态射二于（射）于（整数范围于零于（长度于「列」））于「列」）也。

「滤出可有」乃承元类型者甲而化（或可有于甲）列而甲列也。
滤出可有者会列而鉴列而
 或有【】则【】
    或有（可有「素」）衔「尾」则（素）衔（「滤出可有」于「尾」）
    或有「可无」衔「尾」则（「滤出可有」于「尾」）也。


「： 注 list filter_map。 ：」
「滤态射」乃（承元类型者甲而承元类型者乙而化（化甲而或可有于「乙」）而化甲列而乙列）也。
滤态射者会射而会列而「滤出可有」于（态射于射于「列」）也。

「滤态射二」乃（承元类型者甲而承元类型者乙而承元类型者丙而化（化甲而化丙而或可有于「乙」）而化甲列而化丙列而乙列）也。
滤态射二者会射而会列甲而会列丙而「滤出可有」于（态射二于射于「列甲」于「列丙」）也。


「：list filter_map i：」
「滤态射序号」乃承元类型者甲而承元类型者乙而化（化整数而化甲而或可有于「乙」）而化甲列而乙列也。
「滤态射序号」者会射而会列而「滤出可有」于（态射序号于射于「列」）也。


「：List subset：」
「是子集」乃承元类型者甲而化（化甲而化甲而爻）而化甲列而化甲列而爻也。
是子集者会等而会子而会父而
    （
        （（「全部符合」于（会子元素而
            （（存在吗于（会父元素而「等」于父元素于子元素）于父））
        ）于子））
    ）也。

「：List equal modulo reordering：」
「互为子集」乃承元类型者甲而化（化甲而化甲而爻）而化甲列而化甲列而爻也。
互为子集者会等而会子而会父而
    （（是子集于「等」于「子」于「父」）且（是子集于「等」于「父」于「子」））也。



「数出现次数」乃承元类型者甲而化（化甲而爻）而化甲列而整数也。
数出现次数者会谓词而会甲而长度于（滤于谓词于甲）也。



「：用元素分隔，返回的列是原列的子列，且子列之间会间隔一个分隔符
    例：元素分隔于1于【2，3，1，2】=【【2，3】，【2】】
    例：元素分隔于1于【1，2，3，1，2，1】=【【】，【2，3】，【2】，【】】
    例：元素分隔于1于【1】=【【】，【】】
：」
「元素分隔」乃承元类型者甲而化（化甲而爻）而化甲列而甲列列也。
元素分隔者受甲而会谓词而会列而
    鉴列而
 或有【】则【】
        或有（「头」衔「尾」）则
        （
            「处理余下」乃化甲列而化甲列而化甲列列而甲列列也。
            处理余下者会剩余而会当前未完成而会已有而
                鉴剩余而
                    或有【】则（已有接【当前未完成】）
                    或有（「剩头」衔「剩尾」）则（
                        若谓词于剩头
                        则（处理余下于剩尾于【】于（已有接【当前未完成】））
                        否则（处理余下于剩尾于（当前未完成接【剩头】）于（已有））
                    ）也。
            「结果」者
            若谓词于头
            则（处理余下于尾于【】于【【】】）
            否则（处理余下于尾于【头】于【】）也。
        ）之结果
        也。
    


「：列减 A B = A \ B = {x ∈ A | x ∉ B}：」
「列减」乃承元类型者甲而化（化甲而化甲而爻）「：相等比较：」而化甲列而化甲列而甲列也。
列减者会相等而会被减而会乙列而
    滤于（会甲项而非于（存在吗于（会乙项而（「相等」于乙项于甲项））于「乙列」））于「被减」也。

「查找元素序数」乃承元类型者甲而化（化甲而化甲而爻）「：相等比较：」而化甲而化甲列而或可有于整数也。
查找元素序数者会相等而会搜索值而会待搜索而
    鉴待搜索而
 或有【】则（可无）
        或有（「头」衔「尾」）则
            （若「相等」于头于搜索值
            则（可有零）
            否则（鉴（查找元素序数于「相等」于搜索值于尾）而
 或有（可无）则（可无）
                    或有（可有于「序数」）则（可有于（序数加一））
            ））
            也。

「查找元素序数条件」乃承元类型者甲而化（化甲而爻）「：相等比较：」而化甲列而或可有于整数也。
查找元素序数条件者会条件而会待搜索而
    鉴待搜索而
 或有【】则（可无）
        或有（「头」衔「尾」）则
            （若「条件」于头
            则（可有零）
            否则（鉴（查找元素序数条件于「条件」于尾）而
 或有（可无）则（可无）
                    或有（可有于「序数」）则（可有于（序数加一））
            ））
            也。

「找到元素序数」乃承元类型者甲而化字符串而化（化甲而化甲而爻）「：相等比较：」而化甲而化甲列而整数也。
找到元素序数者会报错信息而会相等而会搜索值而会待搜索而
    鉴查找元素序数于「相等」于搜索值于待搜索而
 或有（可有于「序数」）则序数
        或有（可无）则发生事故于（
            「： 『未找到元素序数』附 ：」
        （报错信息））
            也。

「列查找替换」乃承元类型者甲而化（化甲而化甲而爻）「：相等比较：」
                而化甲列「：原先列：」
                而化甲列「：待查找列：」
                而化甲列「：替换后列：」
                而甲列也。
「列查找替换」者会等而会原先而会查找值而会替换后而
    鉴原先而
 或有【】则【】
        或有（「头」衔「尾」）则
            （若「以起否」于「等」于查找值于原先
            则（替换后接（「列查找替换」于「等」于（放于（长度于查找值）于原先）于查找值于替换后））
            否则（头衔（「列查找替换」于「等」于尾于查找值于替换后））
            ）也。


「：TODO：」
「条件分类」乃承元类型者甲而化甲列而化（化甲而爻）而甲列，甲列也。
条件分类者会待分类而会条件而
    鉴待分类而
 或有【】则【】、【】
        或有（「头」衔「尾」）则
            （若条件于头
                则（
                    虑递归结果者（条件分类于「尾」于「条件」）而
                    （头衔（递归结果之「零」））、（递归结果之「一」）
                ）
                否则（
                    虑递归结果者（条件分类于尾于条件）而
                    （（递归结果之「零」））、（头衔（递归结果之「一」））
                ）
            ）也。

「列引用前衔」乃承元类型者甲而化引用类于（甲列）而化甲而有也。
列引用前衔者会「列引用」而会新元素而
    「写引用」于「列引用」于（新元素衔（读引用于「列引用」））也。

「以合并列」乃承元类型者甲而化甲而化甲列而甲列也。
「以合并列」者会分隔符而会「列」而
    鉴「列」而
 或有【】则【】
    或有「元素」衔【】则「元素」衔【】
    或有「元素」衔「尾」则「元素」衔分隔符衔（「以合并列」于分隔符于「尾」）
    也。

术以「分隔符」合并列「甲」「100」盖谓「以合并列」于「分隔符」于「甲」也。
「： 术以〇合并列〇交无序七零零也。 ：」

「从右折叠带序数」乃承元类型者甲而承元类型者乙而化整数而化（化整数而化甲而化乙而「乙」）而化乙而化甲列而乙也。
从右折叠带序数者会当前数而会组合而会缺省而（会甲而鉴甲而
 或有空则缺省
        或有「头」衔「尾」则
            
                组合于当前数于头于（从右折叠带序数于（当前数加一）于「组合」于缺省于（尾））
            ）也。

「从左折叠带序数」乃承元类型者甲而承元类型者乙而化整数而化（化整数而化甲而化乙而「乙」）而化乙而化甲列而乙也。
从左折叠带序数者会当前数而会组合而会缺省而会甲而鉴甲而
 或有空则缺省
        或有「头」衔「尾」则
            
                从左折叠带序数于（当前数加一）于「组合」于（「组合」于当前数于头于缺省）于尾
            也。
 