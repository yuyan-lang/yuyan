
寻观标准库之书。
寻观拓展库之顺序标识符之顺序标识符之书。

续延函数名者『豫言保留续延函数』也。

包裹函数体乃化字符串而化字符串列而化字符串而字符串也。
包裹函数体者会函数名而会参数签名而会串而『define internal i64* @"』附函数名附『"』附（『』）附『 {「：换行：」』
                                    附（串）附『「：换行：」}』也。
默认编译模块的信息乃化有而字符串也。
默认编译模块的信息者会无而
『declare i64** @yy_gcAllocateArray(i64)「：换行：」』
也。

代码生成顶层乃化字符串列而「：先前编译的全局模块名：」
             化字符串而「：当前文件路径：」
                    字符串也。
代码生成顶层者会先前模块路径名而会当前路径而
    虑输出引用者新引用于【】而
    虑全局名者下个字符序数于『标准模块名』附『_模块』而
    虑临时名者下个字符序数于『临时模块变量』而
    虑写出者（化字符串而有也（会新输出而（写引用于输出引用于（新输出衔（读引用于输出引用）））））而
    虑本次函数名者下个字符序数于『本模块函数』而
    虑参数空名者下个字符序数于『参数空名』而
    虑闭包空名者下个字符序数于『闭包空名』而
    虑全局函数名者下个字符序数于『标准模块名』附『_模块初始化函数』而
    虑续延函数名者下个字符序数于（『标准模块名』附『_模块保存续延函数』）而
    虑无者（写出于
        （「串组合并」于（
            「串典态射」于（会名而会参数个数而
                『declare i64* @"』附（名）附『"(』附（
                        以『 ,』合并（打表于参数个数于（会序数而『i64*』）））附『)「：换行：」』
            ）于（空串典）
        ））
    ）而
    「：写全局的模块：」
    「： 虑数组创建函数二者创建固定长度的数组于写出于（二）而 ：」
    虑无者（写出于
        『@"』附全局名附『" = global i64* null「：换行：」』附
        『define i64* @"』附续延函数名附『"(i64* "闭包", i64* %"模块值", i64* %"空续延值_顶层"){「：换行：」』附
        『store i64* %"模块值", i64** @"』附全局名附『"「：换行：」』附
        『ret i64* null「：换行：」』附
        『}「：换行：」』附
        『define i64* @"』附全局函数名附『"(){「：换行：」』附
        『%"赋值续延值" = bitcast i64* (i64*, i64*, i64*)* @"』附续延函数名附『" to i64*「：换行：」』附
        『%"赋值续延函数包" = call i64* @"』附『数组创建函数二』附『"(i64* %"赋值续延值", i64* null)「：换行：」』附
        『%"全局返回值" = call i64* @"』附本次函数名附『"(i64* null, i64* null, i64* %"赋值续延函数包")「：换行：」』附 「：这里不must musttail 因为这是入口函数：」
        （『全局返回值』）附『「：换行：」』附
        『}』
        ）而
    虑无者（态射于（会路径而写出于
                    （虑先前全局名者（路径）而
                        （路径））附『@"』附『先前全局名』附『" = external global i64*』）
                ）于先前模块路径名而
    虑最终输出源码者（默认编译模块的信息于元）附『「：换行：」』附（以『「：换行：」』合并（读引用于输出引用））而
    最终输出源码
    也。

文件系统之写文件于『write-3.txt』于（代码生成顶层于【『模1』，『模2』】于『《当前路径》』）。