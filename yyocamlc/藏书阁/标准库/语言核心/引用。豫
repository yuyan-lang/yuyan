
观「内建类型」之书。



「引用类」作（化元类型而元类型）也。

「新引用」乃承「甲」而化「甲」而「引用类」于「甲」也。
「新引用」者会「值」而《《外部调用『ref』》》于「值」也。

「读引用」乃承「甲」而化「引用类」于「甲」而「甲」也。
「读引用」者会「引用」而《《外部调用『(fun r -> !r)』》》于「引用」也。

「写引用」乃承「甲」而化「引用类」于「甲」而化「甲」而「有」也。
「写引用」者（会「引用」而会「值」而《《外部调用『(fun r v -> r := v)』》》于「引用」于「值」）也。

「：TODO：我们需要考虑加入边界检查！：」

「数组引用类」作（化元类型而元类型）也。

「新数组引用」乃承「甲」而化「甲」而化「整数」而「数组引用类」于「甲」也。
「新数组引用」者会「值」而会「长度」而《《外部调用『(fun (v, len) -> Array.make len (ref v))』》》于「值」于「长度」也。

「：！！读取一个未初始化的数组不是安全的：」
「新数组引用不初始化」乃承「甲」而化「整数」而「数组引用类」于「甲」也。
「新数组引用不初始化」者会「长度」而《《外部调用『(fun len -> Array.make len (ref (Obj.magic ())))』》》于「长度」也。


「读数组引用」乃承「甲」而化「数组引用类」于「甲」而化「整数」而「甲」也。
「读数组引用」者会「引用」而会「索引」而《《外部调用『(fun arr idx -> !(arr.(idx)))』》》于「引用」于「索引」也。

「写数组引用」乃承「甲」而化「数组引用类」于「甲」而化「整数」而化「甲」而「有」也。
「写数组引用」者（会「引用」而会「索引」而会「值」而《《外部调用『(fun arr idx v -> arr.(idx) := v)』》》于「引用」于「索引」于「值」）也。


「混合数组引用类」作元类型也。

「新混合数组引用」乃化「整数」而「混合数组引用类」也。
「新混合数组引用」者会「长度」而《《外部调用『(fun len -> Array.make len (ref (Obj.magic ())))』》》于「长度」也。

「读混合数组引用」乃承「甲」而化「混合数组引用类」而化「整数」而「甲」也。
「读混合数组引用」者会「引用」而会「索引」而《《外部调用『(fun arr idx -> !(arr.(idx)))』》》于「引用」于「索引」也。

「写混合数组引用」乃承「甲」而化「混合数组引用类」而化「整数」而化「甲」而「有」也。
「写混合数组引用」者（会「引用」而会「索引」而会「值」而《《外部调用『(fun arr idx v -> arr.(idx) := v)』》》于「引用」于「索引」于「值」）也。

