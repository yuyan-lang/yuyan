
观「内建类型」之书。




「： 「引用操作」乃（承乙而「「
    「甲」乃元类型也。
    「创造」乃（化乙而（甲））也。
    「读取」乃（化甲而（乙））也。
    「写」乃（化乙而化甲而（有））也。
                      」」）也。
引用操作者受乙而 （
        「： 甲乃元类型也。
        甲者「《《内建类型：新的外部类型》》」也。 ：」
        甲立元类型也。
        创造乃（化乙而（甲））也。
        创造者（会值而《《外部调用『yyNewRef』》》于值）也。
        读取乃（化甲而（乙））也。
        读取者（会引用而《《外部调用『yyReadRef』》》于（引用））也。
        写乃（化乙而化甲而（有））也。
        写者（会值而会引用而《《外部调用『yyWriteRef』》》于值于（引用））也。
）也。





「数组操作」乃（承乙而「「

                      甲乃元类型也。
                      创造乃（化乙而化「整数」而（甲））也。
                      读取乃（化甲而化「整数」而（乙））也。
                      写乃（化乙而化「整数」而化甲而（「有」））也。
                    」」）也。
数组操作者受乙而（

        「： 甲乃元类型也。 ：」
        「： 甲者「《《内建类型：新的外部类型》》」也。 ：」
        甲立元类型也。
        创造乃（化乙而化「整数」而（甲））也。
        创造者（会值而会长度而《《外部调用『yyNewRefArray』》》于值于长度）也。
        读取乃（化甲而化「整数」而（乙））也。
        读取者（会引用而会索引而《《外部调用『yyReadRefArray』》》于（引用）于索引）也。
        写乃（化乙而化「整数」而化甲而（「有」））也。
        写者（会值而会索引而会引用而《《外部调用『yyWriteRefArray』》》于值于索引于（引用））也。
）
也。 ：」

「： 注TODO:
我们应该支持letin结构「
以数组操作为承乙而（夫甲表元类型合
                      夫创造表（化乙而化「整数」而（甲））合
                      夫读取表（化甲而化「整数」而（乙））合
                      夫写表（化乙而化「整数」而化甲而（「有」）））。
数组操作者虑（
    数组引用值类者《《内建类型：新的外部类型》》也。
）以成（数组引用值类、
    （会值而会长度而《《外部调用『yyNewRefArray』》》于值于长度）、
    （会引用而会索引而《《外部调用『yyReadRefArray』》》于（引用）于索引）、
    （会值而会索引而会引用而《《外部调用『yyWriteRefArray』》》于值于索引于（引用））
）之道也。
」。 ：」

「：更新的引用，我感觉老版引用是我们尚未引入Type Constructor时候写的，用起来十分麻烦：」

「引用类」作（化元类型而元类型）也。

「新引用」乃承「甲」而化「甲」而「引用类」于「甲」也。
「新引用」者会「值」而《《外部调用『yyNewRef』》》于「值」也。

「读引用」乃承「甲」而化「引用类」于「甲」而「甲」也。
「读引用」者会「引用」而《《外部调用『yyReadRef』》》于（「引用」）也。

「写引用」乃承「甲」而化「引用类」于「甲」而化「甲」而「有」也。
「写引用」者（会「引用」而会「值」而《《外部调用『yyWriteRef』》》于「值」于（「引用」））也。

「：TODO：我们需要考虑加入边界检查！：」

「数组引用类」作（化元类型而元类型）也。

「新数组引用」乃承「甲」而化「甲」而化「整数」而「数组引用类」于「甲」也。
「新数组引用」者会「值」而会「长度」而《《外部调用『yyNewRefArray』》》于「值」于「长度」也。

「：！！读取一个未初始化的数组不是安全的：」
「新数组引用不初始化」乃承「甲」而化「整数」而「数组引用类」于「甲」也。
「新数组引用不初始化」者会「长度」而《《外部调用『yyNewRefArrayGeneric』》》于「长度」也。


「读数组引用」乃承「甲」而化「数组引用类」于「甲」而化「整数」而「甲」也。
「读数组引用」者会「引用」而会「索引」而《《外部调用『yyReadRefArray』》》于（「引用」）于「索引」也。

「写数组引用」乃承「甲」而化「数组引用类」于「甲」而化「整数」而化「甲」而「有」也。
「写数组引用」者（会「引用」而会「索引」而会「值」而《《外部调用『yyWriteRefArray』》》于「值」于「索引」于（「引用」））也。


「混合数组引用类」作元类型也。

「新混合数组引用」乃化「整数」而「混合数组引用类」也。
「新混合数组引用」者会「长度」而《《外部调用『yyNewRefArrayGeneric』》》于「长度」也。

「读混合数组引用」乃承「甲」而化「混合数组引用类」而化「整数」而「甲」也。
「读混合数组引用」者会「引用」而会「索引」而《《外部调用『yyReadRefArray』》》于（「引用」）于「索引」也。

「写混合数组引用」乃承「甲」而化「混合数组引用类」而化「整数」而化「甲」而「有」也。
「写混合数组引用」者（会「引用」而会「索引」而会「值」而《《外部调用『yyWriteRefArray』》》于「值」于「索引」于（「引用」））也。

