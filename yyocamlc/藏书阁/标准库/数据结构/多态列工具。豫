观「多态列」之书。
观「藏书阁」之「标准库」之「语言核心」之「内建类型」之书。
观「藏书阁」之「标准库」之「语言核心」之「引用」之书。

观「整数操作」之书。
观「爻术」之书。
观「藏书阁」之「标准库」之「语言核心」之「异常」之书。
观「可选值」之书。
观「藏书阁」之「标准库」之「语言核心」之「续延」之书。

「头一个」乃承元类型者「乙」而化「乙」列而「乙」也。
「头一个」者受「乙」而会「列」而
    鉴「列」而
 或有「空」则
        （「发生事故」于『索引异常』
            「： 索引异常之抛出授以乙于元 ：」
            「： 注（错误之错误 授以（「乙」））于『错误：第N个的N超出了范围』 ：」
            ）
        或有「头」衔「尾」则（
            「头」
        ）也。

「最后一个」乃承元类型者「乙」而化「乙」列而「乙」也。
「最后一个」者会「列」而
     「头一个」于（「反转」于「列」）也。

「更新第N个」乃承元类型者「乙」而化「整数」而化（化「乙」而「乙」）而化「乙」列而「乙」列也。
「更新第N个」者会「序数」而会「射」而会「列」而
    （「取」于「序数」于「列」）接（【「射」于（「第N个」于「序数」于「列」）】）接（「放」于（「序数」加一）于「列」）也。

「移除重复」乃承元类型者「乙」而化（化「乙」而化「乙」而「爻」）而化「乙」列而「乙」列也。
「移除重复」者会「等」而会「入」而
    鉴「入」而
 或有【】则【】
        或有「头」衔「尾」则「头」衔（「移除重复」于「等」于（「滤」于（会「甲」而「非」于（「等」于「甲」于「头」））于「尾」））也。

「找到重复」乃承元类型者「乙」而化（化「乙」而化「乙」而「爻」）而化「乙」列而「乙」列也。
「找到重复」者会「等」而会「入」而
    鉴「入」而
 或有【】则【】
        或有「头」衔「尾」则
        （若「存在吗」于（「等」于「头」）于「尾」
        则「头」衔（「找到重复」于「等」于（「滤」于（会「甲」而「非」于（「等」于「甲」于「头」））于「尾」））
        否则「找到重复」于「等」于「尾」）也。
        
「出现重复」乃承元类型者「乙」而化（化「乙」而化「乙」而「爻」）而化「乙」列而「爻」也。
「出现重复」者会「等」而会「入」而
    （「长度」于「入」）不等于（「长度」于（「移除重复」于「等」于「入」））也。

「：zip，长度必须一样：」
「拉链合并」乃承元类型者「甲」而承元类型者「乙」而化「甲」列而化「乙」列而（「甲」，「乙」）列也。
「拉链合并」者会「甲列」而会「乙列」而
    鉴「甲列」、「乙列」而
 或有【】、【】则【】
    或有（「甲首」衔「甲尾」）、（「乙首」衔「乙尾」）则（「甲首」、「乙首」）衔（「拉链合并」于「甲尾」于「乙尾」）
    或有「其他」则「发生事故」于『拉链合并于不同长度的两个列』也。
    

「态射二」乃（承元类型者「甲」而承元类型者「乙」而承元类型者「丙」而化（化「甲」而化「丙」而「乙」）而化「甲」列而化「丙」列而「乙」列）也。
「态射二」者受「甲」而受「乙」而（会「射」而（会「列甲」而会「列丙」而（鉴「列甲」、「列丙」而
 或有「空」、「空」则「空」
        或有「甲头」衔「甲尾」、「乙头」衔「乙尾」则
            （（「射」于「甲头」于「乙头」）衔（「态射二」于「射」于「甲尾」于「乙尾」） ）
        或有「其他」则「发生事故」于『态射二中的长度不一致！！』
）））也。

「： 注all。 ：」
「全部符合二」乃（承元类型者「甲」而承元类型者「乙」而化（化「甲」而化「乙」而「爻」）而化「甲」列而化「乙」列而「爻」）也。
「全部符合二」者会「判断」而会「列甲」而会「列乙」而
    鉴「列甲」、「列乙」而
 或有「空」、「空」则「阳」
        或有「甲头」衔「甲尾」、「乙头」衔「乙尾」则
            （若（「判断」于「甲头」于「乙头」）
            则（「全部符合二」于「判断」于「甲尾」于「乙尾」）
            否则「阴」 ）
        或有「其他」则「发生事故」于『态射二中的长度不一致！！』也。


「列相等」乃承元类型者「甲」而化（化「甲」而化「甲」而「爻」）而化「甲」列而化「甲」列而「爻」也。
「列相等」者会「比较」而会「列甲」而会「列乙」而
    若（「长度」于「列甲」）不等于（「长度」于「列乙」）
    则（「阴」）
    否则（「全部符合二」于「比较」于「列甲」于「列乙」）也。



「整数范围」乃化「整数」而化「整数」而「整数」列也。
「整数范围」者会「始」而会「止」而
    若「或者」于（「始」大于「止」）于（「始」等于「止」）
    则【】
    否则「始」衔（「整数范围」于（「始」加一）于「止」）也。

「：list map_i：」
「态射序号」乃（承元类型者「甲」而承元类型者「乙」而化（化「整数」而化「甲」而「乙」）而化「甲」列而「乙」列）也。
「态射序号」者受「甲」而受「乙」而会「射」而会「列」而（「态射二」于（「射」）于（「整数范围」于「零」于（「长度」于「列」））于「列」）也。

「滤出可有」乃承元类型者「甲」而化「或可有」于「甲」列而「甲」列也。
「滤出可有」者会「列」而鉴「列」而
 或有【】则【】
    或有（「可有」于「素」）衔「尾」则（「素」）衔（「滤出可有」于「尾」）
    或有「可无」衔「尾」则（「滤出可有」于「尾」）也。


「： 注 list filter_map。 ：」
「滤态射」乃（承元类型者「甲」而承元类型者「乙」而化（化「甲」而「或可有」于「乙」）而化「甲」列而「乙」列）也。
「滤态射」者会「射」而会「列」而「滤出可有」于（「态射」于「射」于「列」）也。

「滤态射二」乃（承元类型者「甲」而承元类型者「乙」而承元类型者「丙」而化（化「甲」而化「丙」而「或可有」于「乙」）而化「甲」列而化「丙」列而「乙」列）也。
「滤态射二」者会「射」而会「列甲」而会「列丙」而「滤出可有」于（「态射二」于「射」于「列甲」于「列丙」）也。


「：list filter_map i：」
「滤态射序号」乃承元类型者「甲」而承元类型者「乙」而化（化「整数」而化「甲」而「或可有」于「乙」）而化「甲」列而「乙」列也。
「滤态射序号」者会「射」而会「列」而「滤出可有」于（「态射序号」于「射」于「列」）也。


「：List subset：」
「是子集」乃承元类型者「甲」而化（化「甲」而化「甲」而「爻」）而化「甲」列而化「甲」列而「爻」也。
「是子集」者会「等」而会「子」而会「父」而
    （
        （（「全部符合」于（会「子元素」而
            （（「存在吗」于（会「父元素」而「等」于「父元素」于「子元素」）于「父」））
        ）于「子」））
    ）也。

「：List equal modulo reordering：」
「互为子集」乃承元类型者「甲」而化（化「甲」而化「甲」而「爻」）而化「甲」列而化「甲」列而「爻」也。
「互为子集」者会「等」而会「子」而会「父」而
    （（「是子集」于「等」于「子」于「父」）且（「是子集」于「等」于「父」于「子」））也。



「数出现次数」乃承元类型者「甲」而化（化「甲」而「爻」）而化「甲」列而「整数」也。
「数出现次数」者会「谓词」而会「甲」而「长度」于（「滤」于「谓词」于「甲」）也。



「：用元素分隔，返回的列是原列的子列，且子列之间会间隔一个分隔符
    例：元素分隔于1于【2，3，1，2】=【【2，3】，【2】】
    例：元素分隔于1于【1，2，3，1，2，1】=【【】，【2，3】，【2】，【】】
    例：元素分隔于1于【1】=【【】，【】】
：」
「元素分隔」乃承元类型者「甲」而化（化「甲」而「爻」）而化「甲」列而「甲」列列也。
「元素分隔」者受「甲」而会「谓词」而会「列」而
    鉴「列」而
 或有【】则【】
        或有（「头」衔「尾」）则
        递归虑「处理余下」其「甲」列列者会「剩余」而会「当前未完成」而会「已有」而
                鉴「剩余」而
                    或有【】则（「已有」接【「当前未完成」】）
                    或有（「剩头」衔「剩尾」）则（
                        若「谓词」于「剩头」
                        则（「处理余下」于「剩尾」于【】于（「已有」接【「当前未完成」】））
                        否则（「处理余下」于「剩尾」于（「当前未完成」接【「剩头」】）于（「已有」））
                    ）
            而
            若「谓词」于「头」
            则（「处理余下」于「尾」于【】于【【】】）
            否则（「处理余下」于「尾」于【「头」】于【】）
        也。
    


「：列减 A B = A \ B = {x ∈ A | x ∉ B}：」
「列减」乃承元类型者「甲」而化（化「甲」而化「甲」而「爻」）「：相等比较：」而化「甲」列而化「甲」列而「甲」列也。
「列减」者会「相等」而会「被减」而会「乙列」而
    「滤」于（会「甲项」而「非」于（「存在吗」于（会「乙项」而（「相等」于「乙项」于「甲项」））于「乙列」））于「被减」也。

「查找元素序数」乃承元类型者「甲」而化（化「甲」而化「甲」而「爻」）「：相等比较：」而化「甲」而化「甲」列而「或可有」于「整数」也。
「查找元素序数」者会「相等」而会「搜索值」而会「待搜索」而
    鉴「待搜索」而
 或有【】则（可无）
        或有（「头」衔「尾」）则
            （若「相等」于「头」于「搜索值」
            则（可有零）
            否则（鉴（查找元素序数于「相等」于「搜索值」于「尾」）而
 或有（可无）则（可无）
                    或有（可有于「序数」）则（可有于（「序数」加一））
            ））
            也。

「查找元素序数条件」乃承元类型者「甲」而化（化「甲」而「爻」）「：相等比较：」而化「甲」列而「或可有」于「整数」也。
「查找元素序数条件」者会「条件」而会「待搜索」而
    鉴「待搜索」而
 或有【】则（可无）
        或有（「头」衔「尾」）则
            （若「条件」于「头」
            则（可有零）
            否则（鉴（查找元素序数条件于「条件」于「尾」）而
 或有（可无）则（可无）
                    或有（可有于「序数」）则（可有于（「序数」加一））
            ））
            也。

「找到元素序数」乃承元类型者「甲」而化「字符串」而化（化「甲」而化「甲」而爻）「：相等比较：」而化「甲」而化「甲」列而「整数」也。
「找到元素序数」者会「报错信息」而会「相等」而会「搜索值」而会「待搜索」而
    鉴查找元素序数于「相等」于「搜索值」于「待搜索」而
 或有（可有于「序数」）则「序数」
        或有（可无）则「发生事故」于（
            「： 『未找到元素序数』附 ：」
        （「报错信息」））
            也。

「列查找替换」乃承元类型者「甲」而化（化「甲」而化「甲」而爻）「：相等比较：」
                而化「甲」列「：原先列：」
                而化「甲」列「：待查找列：」
                而化「甲」列「：替换后列：」
                而「甲」列也。
「列查找替换」者会「等」而会「原先」而会「查找值」而会「替换后」而
    鉴「原先」而
 或有【】则【】
        或有（「头」衔「尾」）则
            （若「以起否」于「等」于「查找值」于「原先」
            则（「替换后」接（「列查找替换」于「等」于（放于（长度于「查找值」）于「原先」）于「查找值」于「替换后」））
            否则（「头」衔（「列查找替换」于「等」于「尾」于「查找值」于「替换后」））
            ）也。


「：TODO：」
「条件分类」乃承元类型者「甲」而化「甲」列而化（化「甲」而爻）而「甲」列，「甲」列也。
「条件分类」者会「待分类」而会「条件」而
    鉴「待分类」而
 或有【】则【】、【】
        或有（「头」衔「尾」）则
            （若「条件」于「头」
                则（
                    虑「递归结果」者（条件分类于「尾」于「条件」）而
                    （「头」衔（「递归结果」之「零」））、（「递归结果」之「一」）
                ）
                否则（
                    虑「递归结果」者（条件分类于「尾」于「条件」）而
                    （（「递归结果」之「零」））、（「头」衔（「递归结果」之「一」））
                ）
            ）也。

「列引用前衔」乃承元类型者「甲」而化引用类于（「甲」列）而化「甲」而有也。
「列引用前衔」者会「列引用」而会「新元素」而
    「写引用」于「列引用」于（「新元素」衔（读引用于「列引用」））也。

「以合并列」乃承元类型者「甲」而化「甲」而化「甲」列而「甲」列也。
「以合并列」者会「分隔符」而会「列」而
    鉴「列」而
 或有【】则【】
    或有「元素」衔【】则「元素」衔【】
    或有「元素」衔「尾」则「元素」衔「分隔符」衔（「以合并列」于「分隔符」于「尾」）
    也。

术以「分隔符」合并列「甲」「100」盖谓「以合并列」于「分隔符」于「甲」也。
「： 术以〇合并列〇交无序七零零也。 ：」

「从右折叠带序数」乃承元类型者「甲」而承元类型者「乙」而化「整数」而化（化整数而化「甲」而化「乙」而「乙」）而化「乙」而化「甲」列而「乙」也。
「从右折叠带序数」者会「当前数」而会「组合」而会「缺省」而（会「甲」而鉴「甲」而
 或有「空」则「缺省」
        或有「头」衔「尾」则
            
                「组合」于「当前数」于「头」于（从右折叠带序数于（「当前数」加一）于「组合」于「缺省」于（「尾」））
            ）也。

「从左折叠带序数」乃承元类型者「甲」而承元类型者「乙」而化「整数」而化（化整数而化「甲」而化「乙」而「乙」）而化「乙」而化「甲」列而「乙」也。
「从左折叠带序数」者会「当前数」而会「组合」而会「缺省」而会「甲」而鉴「甲」而
 或有「空」则「缺省」
        或有「头」衔「尾」则
            
                从左折叠带序数于（「当前数」加一）于「组合」于（「组合」于「当前数」于「头」于「缺省」）于「尾」
            也。
 