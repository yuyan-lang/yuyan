


寻观标准库之书。

。



寻观豫言编译器之编译数据之编译配置之编译期输出之书。
寻观豫言编译器之编译数据之编译配置之全局配置之书。
寻观豫言编译器之编译步骤之总体过程之编译过程工具之书。



寻观拓展库之顺序标识符之顺序标识符之书。

寻观豫言编译器之编译数据之编译配置之全局配置之书。
寻观目标信息之书。


「： 默认调用规范者『fastcc』也。 ：」
「： 默认调用规范者『cc 10』也。 ：」
「： 默认调用规范者『cc 11』也。 ：」
默认调用规范者『ccc』也。
默认指针类型者『i64*』也。
续延函数名者『豫言保留续延函数』也。
「： 恒等函数名者『恒等函数』也。 ：」

「：每个编译单元都要重置此值：」
「：TODO：这个设计并不好：」
所有外部调用乃引用类于（串典于整数）也。
所有外部调用者新引用于（空串典）也。

添加外部调用乃化字符串而化整数而有也。
添加外部调用者会串而会参数个数而写引用于「所有外部调用」于（串典更新于（读引用于「所有外部调用」）于串于（参数个数））也。

「：给定字符串，条件输出可以直接插入源码的字符串：」
调试写乃化（化有而字符串）而字符串也。
调试写者会串而若（读引用于（字节码打印调试信息））
       则 『;』附（串查找替换于（串于元）于『「：换行：」』于『「：「：：」换行：」』）附『「：换行：」』否则『』也。


字符串声明类型乃化字符串「：内容：」而字符串「：类型的代码：」也。
字符串声明类型者会内容而
    『[』附（整数表示于（（字节长度于内容）加一））附（『 x i8]』）也。

字符串声明乃化字符串「：内容：」而化字符串「：串值：」而字符串「：声明的代码：」也。
字符串声明者会串名而会内容而
    『@"』附（串名）附『" = private constant 』附（字符串声明类型于内容）附
    『 [』附（以『, 』合并（打表于（（字节长度于内容）加一）于（会序数而
        『i8 』附（整数表示于 （字符转整数于内容于序数）））））附『]』
                        也。

「： 创建固定长度的数组乃化（化字符串而有）而化整数而字符串也。
创建固定长度的数组者会写出而会长度而
    虑
    「返回名者下个字符序数于『创建长度为』附（整数表示于长度）附『的数组』也。
    数组名者下个字符序数于『数组』也。
    写出于
    『define internal 』附默认调用规范附『 i64* @"』附返回名附『"(』附
        （以『, 』合并（态射于（会数而『i64* %"元素』附（整数表示于数）附『"』）于（整数范围于零于长度）））
        附『) alwaysinline {』附『「：换行：」』附
    『%"』附（数组名）附『" = call 』附（默认指针类型）附『* @yy_gcAllocateArray(i64 』附（整数表示于长度）附『)』附『「：换行：」』附
        （以『「：换行：」』合并（态射于（会序数而
            『%"元素指针』附（整数表示于序数）附『" = getelementptr 』附（默认指针类型）附
                『, 』附（默认指针类型）附『* %"』附（数组名）附『", i64 』附（整数表示于序数）附『「：换行：」』附
            『store 』附（默认指针类型）附『 %"元素』附（整数表示于序数）附『", 』附（默认指针类型）附『* %"元素指针』附（整数表示于序数）附『"』
        ）于（整数范围于零于长度）））附『「：换行：」』附


    『%"返回数组名" = bitcast 』附（默认指针类型）附『* %"』附（数组名）附『" to 』附（默认指针类型）附『「：换行：」』附
    『ret i64* %"返回数组名"』附『「：换行：」』附
    『}』。
    返回名」也。 ：」

断言乃化爻而有也。
断言者会值而若值则元否则（发生事故于『断言不对』）也。


「： 
获取模式匹配分支模式乃化表达式而表达式也。
获取模式匹配分支模式者会分支式而
    鉴分支式而
        有（式节点于（模式匹配分支）于「模式」衔「结果」衔【】）则
            （模式）
        或有「其他」则发生事故于『期待模式匹配分支:160』附（表达式表示于分支式）也。 ：」

「：输入是模式匹配分支，写一个函数，参数是待匹配的模式，返回值是i1，如果匹配返回真，不匹配返回假：」
「： 编译模式匹配分支条件乃化（化字符串而有）而化表达式而字符串也。
编译模式匹配分支条件者循编译模式匹配分支条件以会写出而会模式而

            鉴模式而
                有（式节点于（模式匹配新变量于「另名」）于「另参」）则（
                    虑返回名者下个字符序数于『模式匹配条件』而
                    虑无者写出于（
                       『define internal i1 @"』附返回名附『"(i64* %"参数") {「：换行：」』附
                        （调试写于（会无而（表达式表示于模式）））附
                        『ret i1 1「：换行：」』附
                        『}』
                       ）
                    而返回名
                ）
                或有（式节点于（整数节点于数）于【】）则（
                    虑返回名者下个字符序数于『模式匹配条件』而
                    虑无者写出于（
                       『define internal i1 @"』附返回名附『"(i64* %"参数") {「：换行：」』附
                        （调试写于（会无而（表达式表示于模式）））附
                       『%"参数值" = ptrtoint i64* %"参数" to i64「：换行：」』附
                       『%"返回值" = icmp eq i64 %"参数值", 』附（整数表示于数）附『「：换行：」』附
                        『ret i1 %"返回值"「：换行：」』附
                        『}』
                       ）
                    而返回名
                ）
                或有（式节点于（内建节点于内建爻阳）于【】）则（
                    虑返回名者下个字符序数于『模式匹配条件』而
                    虑无者写出于（
                       『define internal i1 @"』附返回名附『"(i64* %"参数") {「：换行：」』附
                        （调试写于（会无而（表达式表示于模式）））附
                       『%"参数值" = ptrtoint i64* %"参数" to i1「：换行：」』附
                       『%"返回值" = icmp eq i1 %"参数值", 1「：换行：」』附
                        『ret i1 %"返回值"「：换行：」』附
                        『}』
                       ）
                    而返回名
                ）
                或有（式节点于（内建节点于内建爻阴）于【】）则（
                    虑返回名者下个字符序数于『模式匹配条件』而
                    虑无者写出于（
                       『define internal i1 @"』附返回名附『"(i64* %"参数") {「：换行：」』附
                        （调试写于（会无而（表达式表示于模式）））附
                       『%"参数值" = ptrtoint i64* %"参数" to i1「：换行：」』附
                       『%"返回值" = icmp eq i1 %"参数值", 0「：换行：」』附
                        『ret i1 %"返回值"「：换行：」』附
                        『}』
                       ）
                    而返回名
                ）
                或有（式节点于（字符串节点于串）于【】）则（
                    虑返回名者下个字符序数于『模式匹配条件』而
                    虑串名者下个字符序数于『模式匹配字符串』而
                    虑无者写出于（
                            字符串声明于串名于串
                        ）而
                    虑无者「添加外部调用」于『yyStringEq』于（二）而
                    虑无者写出于（
                       『define internal i1 @"』附返回名附『"(i64* %"参数") {「：换行：」』附
                        （调试写于（会无而（表达式表示于模式）））附
                       『%"比较值" = bitcast 』附（字符串声明类型于串）附『* @"』附（串名）附『" to i64*「：换行：」』附
                       『%"返回值值" = call i64* @"yyStringEq"(i64* %"比较值", i64* %"参数")「：换行：」』附
                       『%"返回值" = ptrtoint i64* %"返回值值" to i1「：换行：」』附
                        『ret i1 %"返回值"「：换行：」』附
                        『}』
                       ）
                    而返回名
                ）
                或有（式节点于（对子构造结尾节点）于【】）则（
                            虑返回名者下个字符序数于『模式匹配条件』而
                            虑无者写出于（
                            『define internal i1 @"』附返回名附『"(i64* %"参数") {「：换行：」』附
                                （调试写于（会无而（表达式表示于模式）））附
                                『ret i1 1「：换行：」』附
                                『}』
                            ）
                            而返回名
                        ）
                或有（式节点于（对子构造节点）于左衔右衔【】）则
                    （
                        虑返回名者下个字符序数于『模式匹配条件对子』而
                        虑左子条件函者编译模式匹配分支条件于写出于左而
                        虑右子条件函者编译模式匹配分支条件于写出于右而
                        虑无者写出于（
                        『define internal i1 @"』附返回名附『"(i64* %"参数") {「：换行：」』附
                            （调试写于（会无而（表达式表示于模式）））附
                            『"进入":「：换行：」』附
                            『%"参数数组" = bitcast i64* %"参数" to i64**「：换行：」』附
                            『%"左指针" = getelementptr i64*, i64** %"参数数组", i64 0「：换行：」』附
                            『%"左值" = load i64*, i64** %"左指针"「：换行：」』附
                            『%"右指针" = getelementptr i64*, i64** %"参数数组", i64 1「：换行：」』附
                            『%"右值" = load i64*, i64** %"右指针"「：换行：」』附
                            『%"左匹配" = call i1 @"』附左子条件函附『"(i64* %"左值")「：换行：」』附
                            『%"右匹配" = call i1 @"』附右子条件函附『"(i64* %"右值")「：换行：」』附
                            『%"综合值" = and i1 %"左匹配", %"右匹配"「：换行：」』附
                            『ret i1 %"综合值"「：换行：」』附
                            『}』
                        ）
                        而返回名
                    ）
                或有（式节点于（元组构造节点）于「参数」）则
                    （
                        虑返回名者下个字符序数于『模式匹配条件元组』而
                        虑无者写出于（
                        『define internal i1 @"』附返回名附『"(i64* %"参数") {「：换行：」』附
                            （调试写于（会无而（表达式表示于模式）））附
                            『%"参数数组" = bitcast i64* %"参数" to i64**「：换行：」』附
                            （以『「：换行：」』合并（
                                打表于（长度于参数）于（会当前元素序数而
                                    虑当数者当前元素序数而
                                    虑子条件函者编译模式匹配分支条件于写出于（第N个于当前元素序数于参数）而
                                        『%"元素』附（整数表示于当数）附『指针" = getelementptr i64*, i64** %"参数数组", i64 』附（整数表示于当数）附『「：换行：」』附
                                        『%"元素』附（整数表示于当数）附『" = load i64*, i64** %"元素』附（整数表示于当数）附『指针"「：换行：」』附
                                        『%"元素』附（整数表示于当数）附『匹配" = call i1 @"』附子条件函附『"(i64* %"元素』附（整数表示于当数）附『")「：换行：」』附
                                        （若当数等于零
                                            则『%"匹配』附（整数表示于（当数））附『" = and i1 1, %"元素』附（整数表示于当数）附『匹配"「：换行：」』
                                            否则『%"匹配』附（整数表示于（当数））附『" = and i1 %"匹配』附（整数表示于（当前元素序数减一））附『", %"元素』附（整数表示于当数）附『匹配"「：换行：」』
                                        ）
                                ）
                            ））附『「：换行：」』附
                            （若（（长度于参数）等于零）
                                则『ret i1 1「：换行：」』
                                否则『ret i1 %"匹配』附（整数表示于（（长度于参数）减一））附『"「：换行：」』
                            ）附
                            『}』
                        ）
                        而返回名
                    ）
                「： 或有（式节点于（「展开后唯一构造器节点」于「构造器序数」）于「参数」）则（
                        虑返回名者下个字符序数于『模式匹配条件』而
                        虑无者写出于（
                        『define internal i1 @"』附返回名附『"(ptr %"参数") {「：换行：」』附
                            （调试写于（会无而（表达式表示于模式）））附
                            「： 『"进入":「：换行：」』附 ：」
                            『%"参数数组" = bitcast ptr %"参数" to ptr*「：换行：」』附
                            『%"构造器指针" = getelementptr i64, ptr %"参数", i64 0「：换行：」』附
                            『%"构造器" = load i64, i64* %"构造器指针"「：换行：」』附
                            『%"匹配0" = icmp eq i64 %"构造器", 』附（整数表示于构造器序数）附『「：换行：」』附
                            『br i1 %"匹配0", label %"参数匹配", label %"早返回"「：换行：」』附
                            『"早返回":「：换行：」』附
                            『ret i1 %"匹配0"「：换行：」』附
                            『"参数匹配":「：换行：」』附
                            （以『「：换行：」』合并（
                                打表于（长度于参数）于（会当前元素序数而
                                    虑当数者当前元素序数加一而
                                    虑子条件函者编译模式匹配分支条件于写出于（第N个于当前元素序数于参数）而
                                        「： 『"元素』附（整数表示于当数）附『":「：换行：」』附 ：」
                                        『%"元素』附（整数表示于当数）附『指针" = getelementptr i64*, i64** %"参数数组", i64 』附（整数表示于当数）附『「：换行：」』附
                                        『%"元素』附（整数表示于当数）附『" = load i64*, i64** %"元素』附（整数表示于当数）附『指针"「：换行：」』附
                                        『%"元素』附（整数表示于当数）附『匹配" = call i1 @"』附子条件函附『"(i64* %"元素』附（整数表示于当数）附『")「：换行：」』附
                                        『%"匹配』附（整数表示于当数）附『" = and i1 %"匹配』附（整数表示于当前元素序数）附『", %"元素』附（整数表示于当数）附『匹配"「：换行：」』
                                ）
                            ））附『「：换行：」』附
                            『ret i1 %"匹配』附（整数表示于（（长度于参数）））附『"「：换行：」』附
                            『}』
                        ）
                        而返回名
                ） ：」
                或有「其他」则发生事故于『期待展开后节点或新变量，却得到了：』附（表达式表示于「其他」）
          
    也。 ：」



「：参数分别是函数包指针，函数的类型，最终函数值和最终闭包值名称：」
读取函数闭包函数值及闭包值乃化字符串而化字符串而化字符串而化字符串而字符串也。
读取函数闭包函数值及闭包值者会函数包指针而会函数类型而会最终函数值而会最终闭包值而
    虑序数者下个字符序数于『_』而
    『%"函数包指针数组』附序数附『" = bitcast i64* %"』附函数包指针附『" to i64**「：换行：」』附
    『%"函数值指针』附序数附『" = getelementptr i64*, i64** %"函数包指针数组』附序数附『", i64 0「：换行：」』附
    『%"函数值值』附序数附『" = load i64*, i64** %"函数值指针』附序数附『"「：换行：」』附
    『%"』附最终函数值附『" = bitcast i64* %"函数值值』附序数附『" to 』附（函数类型）附『*「：换行：」』附
    『%"闭包值指针』附序数附『" = getelementptr i64*, i64** %"函数包指针数组』附序数附『", i64 1「：换行：」』附
    『%"』附最终闭包值附『" = load i64*, i64** %"闭包值指针』附序数附『"「：换行：」』 也。

获取普通参数签名乃化字符串列而字符串也。
获取普通参数签名者会变们而（『(』附（以『, 』合并（
                                （态射于（会变而『i64* %"』附变附『"』）于「变们」）
                                ））附『)』）也。
「： 获取声明参数签名乃化字符串列而字符串也。
获取声明参数签名者会变们而（『(』附（以『, 』合并（
                                （态射于（会变而『i64* %"』附变附『"』）于「变们」）
                                接【『i64* %"』附「续延函数名」附『"』】））附『)』）也。
 ：」

获取目标三元组代码乃化有而字符串也。
获取目标三元组代码者会无而
    若读引用于「不写目标三元组」
    则『』
    否则（
        虑目标字符串者（获取目标三元组字符串于元）而
        『target triple = "』附目标字符串附『"「：换行：」』
    ）也。

默认编译模块的信息乃化有而字符串也。
默认编译模块的信息者会无而
（获取目标三元组代码于元）
附『declare i64* @yy_gcAllocateArray(i64)「：换行：」』
也。


进行单个文件底层编译乃化字符串而有也。
进行单个文件底层编译者会路径而
    虑「
        运行函数者若读引用于打印执行的外部指令则操作系统之子进程之成功运行并打印结果否则操作系统之子进程之成功运行也。
        运行函数于『llvm-as』于【『-o』，
                        （（获取输出文件路径于路径）附『.bc』），（（获取输出文件路径于路径）附『.ll』）】。
        若（读引用于不进行优化）则元否则（
            虑「
                运行函数于『opt』于【『-O3』，『-o』，
                                （（获取输出文件路径于路径）附『.opt.bc』），（（获取输出文件路径于路径）附『.bc』）】。
                「： 运行函数于『llc』于【『-O3』，『-o』，
                                （（获取输出文件路径于路径）附『.opt.ll.o』），（（获取输出文件路径于路径）附『.opt.bc』）】。 ：」
                    元
            」
        ）。
        粗略调试打印行于（会无而『》》》》》》》》代码生成完成： 』附路径）。
        元
    」也。
