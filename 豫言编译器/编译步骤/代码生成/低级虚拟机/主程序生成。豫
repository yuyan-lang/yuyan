寻标准库之书。
观标准库之书。
寻观拓展库之顺序标识符之顺序标识符之书。
寻观豫言编译器之编译数据之抽象绑定树结构之抽象语法树之总集之书。



寻观豫言编译器之编译步骤之闭包转换之正则前闭包转换之书。
寻观豫言编译器之编译步骤之求值正则变换之顶层之书。
寻观豫言编译器之编译步骤之代码生成之代码生成入口之书。

寻观豫言编译器之编译步骤之求值正则变换之代码生成准备变换之书。

寻观豫言编译器之编译步骤之语法分析之函数合集之书。

「： 寻观豫言编译器之编译步骤之代码生成之代码生成之书。 ：」
「： 寻观豫言编译器之编译步骤之代码生成之代码生成工具之书。 ：」
「： 寻观豫言编译器之编译步骤之代码生成之目标信息之书。 ：」

寻观豫言编译器之编译数据之编译配置之编译期输出之书。
寻观豫言编译器之编译数据之编译配置之全局配置之书。
寻观豫言编译器之编译步骤之总体过程之编译过程工具之书。

寻观豫言编译器之编译步骤之总体过程之编译文件缓存工具之书。

寻观标准库之操作系统之路径之书。
寻观代码生成工具之书。
「： 寻观编译过程工具之书。 ：」

「： 寻观程序整合之书。 ：」




编译非全局主模块乃化字符串而有也。
编译非全局主模块者会路径而
    虑文件内容语法者（
        式节点于「内联虑」于【（式节点于「空值节点」于【】），构造抽象于『空值名』于（
            会空值名而
                从右折叠于（会当前路径而会已有式而
                虑无者「添加外部调用」于（当前路径转全局函数名于当前路径）于一而
                    式节点于「内联虑」于【
                        式节点于（函数调用于「显式」）于【
                            （式节点于（「函数引用节点」于（当前路径转全局函数名于当前路径））于【】），（自由变量于空值名）】，
                         进行无名抽象于已有式】
                ）于（自由变量于空值名）于（读引用于文件编译顺序）
        ）】
    ）而
    虑无者写缓存于路径于『文件内容』于（文件内容语法）而
    「： 虑求值变换后语法者 （进行无类型求值正则变换顶层于路径于（前闭包转换顶层于路径于文件内容语法）） ：」
    虑求值变换后语法者 （进行无类型求值正则变换顶层于路径于【『entryMain』与阳与（式节点于（拉姆达抽象于「显式」）于【进行无名抽象于文件内容语法】）】）
    「： 接【
                『entryMain』与阳与（
                    式节点于（拉姆达抽象于「显式」）于【构造抽象于『空白参数』于（
                        会参数而
                        式节点于「内联虑」于
                        【式节点于（「解析后外部调用节点无类型」于（当前路径转全局函数名于路径））于【自由变量于参数】，
                        构造抽象于『空返回』于自由变量】
                    ）】
                ）
    】 ：」
    而
    虑处理后语法者（求值变换后语法）而
    「： 虑处理后语法者（
        鉴求值变换后语法而
            有（名与「可见性」与式）衔【】则（
                【『entryMain』与阳与式】
            ）
            或有「其他」则（
                抽象语法树组也
                （发生事故于『故障67，应该只有一个函数』）
            ）
    ）而 ：」
    虑无者写树组缓存于路径于『正则形式』于（处理后语法）而
    虑无者（单个文件代码生成顶层于（读引用于文件编译顺序）于路径于（获取输出文件路径于路径）于（代码生成准备变换顶层于路径于处理后语法））而
    「： 虑程序本体者（（默认编译模块的信息于元）附
        （「串组合并」于（
                态射于（会路径而
                    「： 虑文件全局名及文件函数名者（读取代码生成信息于路径）而
                    虑文件函数名者文件全局名及文件函数名中一而 ：」
                    『declare i64* @"』附（当前路径转全局函数名于路径）附『"(i64*, i64*, i64*)「：换行：」』
                ）于（读引用于文件编译顺序）
            ）
        ）附
        『declare i64* @"全局异常处理器"(i64*)「：换行：」』附
        『define 』附默认调用规范附『 i64* @"内部全局异常处理器"(i64* %"闭包"){「：换行：」』附
        『%"默认值" = call i64* @"全局异常处理器"(i64* %"闭包")「：换行：」』附
        『ret i64* null「：换行：」』附
        『}「：换行：」』附
        『define i64* @"entryMain"() {「：换行：」』附
        （以『「：换行：」』合并（
                态射于（会路径而
                    「： 虑文件全局名及文件函数名者（读取代码生成信息于路径）而
                    虑文件函数名者文件全局名及文件函数名中一而：」
                    虑临时名者下个字符序数于『模块临时名』而 
                    『%"』附临时名附『" = call 』附默认调用规范附『 i64* @"』附（当前路径转全局函数名于路径）附『"(i64* null, i64* null, i64* null)「：换行：」』
                ）于（读引用于文件编译顺序）
            ）
        ）附『「：换行：」』附
        『ret i64* null「：换行：」』附
        『}「：换行：」』
    ）而
    虑无者文件系统之写文件于（（获取输出文件路径于路径）附『.ll』）于程序本体而 ：」
    虑无者进行单个文件底层编译于路径而
    元也。


低级虚拟机生成可执行程序并执行乃化字符串「：输入文件路径：」而整数「：退出状态：」也。
低级虚拟机生成可执行程序并执行者会当前路径而
        虑模块名者去除路径结尾豫言拓展名于（路径之获取文件名于当前路径）而
        虑虚拟输出文件路径者『yy_』附模块名附『_豫言编译器默认执行包。豫』而
        虑运行函数者若读引用于打印执行的外部指令则操作系统之子进程之成功运行并打印结果否则操作系统之子进程之成功运行而
        虑无者
            （若读引用于「使用全局编译」
            则（
                虑无者（读引用于编译全局主模块引用）于虚拟输出文件路径而
                虑无者
                （运行函数于『llvm-as』于
                    （
                        【『-o』，（（获取输出文件路径于虚拟输出文件路径）附『.bc』），（（获取输出文件路径于虚拟输出文件路径）附『.ll』）】
                ））而
                元
            ）
            否则（
                虑虚拟主文件路径者『yy_』附模块名附『_豫言编译器默认入口文件。豫』而 
                虑无者编译非全局主模块于虚拟主文件路径而
                虑无者
                （运行函数于『llvm-link』于
                    （
                        【『-o』，（（获取输出文件路径于虚拟输出文件路径）附『.bc』）】
                    接（态射于（会路径而
                        （（获取输出文件路径于路径）附（若读引用于不进行优化则『.bc』否则『.opt.bc』））
                    ）于（（读引用于文件编译顺序）接【虚拟主文件路径】）））
                ）而
                元
            ）
            ）而
        虑无者
        （若读引用于不进行优化
            则阳
            否则（运行函数于『opt』于【『-O3』，『-o』，
                                （（获取输出文件路径于虚拟输出文件路径）附『.opt.bc』），（（获取输出文件路径于虚拟输出文件路径）附『.bc』）】）
        ）而
        虑可执行文件输出路径者（鉴（读引用于输出可执行文件路径）而
            有（可有「输出路径」）则输出路径
            或有「可无」则（获取输出文件路径于虚拟输出文件路径）附『.exe』）而
        虑无者（运行函数于『make』于【『-C』，『runtime/』，『debug』】）而
        虑无者
        （运行函数于『clang』于
            （【『-o』，可执行文件输出路径
            】
            接（若读引用于不进行优化
                则【】
                否则【『-O3』】
            ）
            接（【
                （（获取输出文件路径于虚拟输出文件路径）附（若读引用于不进行优化则『.bc』否则『.opt.bc』））
                ，『./runtime/libyyrtdebug.a』
            】）
            接（【『-L』
                ，『/usr/local/lib』
            】）
            接（【『-l』
                ，『gc』
                ，『-l』
                ，『uv』
            】）
            「： 接（【『-l』 ，『stdc++』 】） ：」
            「： 接（若（系统名称之当前系统是Linux于元）则【
                『-l』，『bsd』
            】否则【】） ：」
            接（若（读引用于（不写目标三元组））则【
                『-Wno-override-module』
            】否则【「：CI上还是需要这个，为什么？：」
                『-Wno-override-module』
            】）
            接（【『-g』
                ，『-Werror』
            】）
            ）
        ）而
        虑退出状态者（若读引用于仅执行编译不运行则零否则
            （虑可执行路径者（若路径名是绝对路径于（可执行文件输出路径）则（可执行文件输出路径）否则『./』附（可执行文件输出路径））而
                （（非常粗略调试打印行于（会无而『正在运行目标程序：     』附（可执行路径）附『 』附（以『 』合并（读引用于运行时命令行参数））））；
                操作系统之子进程之运行并传递输出于（可执行路径）于（读引用于运行时命令行参数））
            ）
        ）而
        退出状态
        也。


